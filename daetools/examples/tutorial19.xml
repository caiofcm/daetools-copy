<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="dae-tools.xsl"?>
<Model ID="38301312" Class="daeModel" Library="DAE.Core" Version="1.7.3">
  <Name><![CDATA[tutorial19]]></Name>
  <Description><![CDATA[
This tutorial introduces the thermo physical property packages.

Since there are many thermo packages with a very different API the CapeOpen
standard has been adopted in daetools. This way, all thermo packages implementing
the CapeOpen thermo interfaces are automatically vailable to daetools. Those which
do not are wrapped by the class with the CapeOpen conforming API.
At the moment, two types of thermophysical property packages are implemented:
    
- Any CapeOpen v1.1 thermo package (available only in Windows)
- CoolProp thermo package (available for all platforms) wrapped in
  the class with the CapeOpen interface.
  
The central point is the daeThermoPhysicalPropertyPackage class. It can load any
COM component that implements CapeOpen 1.1 ICapeThermoPropertyPackageManager interface
or the CoolProp thermo package.

The framework provides low-level functions (specified in the CapeOpen standard) in the
daeThermoPhysicalPropertyPackage class and the higher-level functions in the auxiliary
daeThermoPackage class defined in the daetools/pyDAE/thermo_packages.py file.
The low-level functions are defined in the ICapeThermoCoumpounds and ICapeThermoPropertyRoutine
CapeOpen interfaces. These functions come in two flavours:
    
(a) The ordinary functions return adouble/adouble_array objects and can only be used to specify equations:
    
    - GetCompoundConstant (from ICapeThermoCoumpounds interface)
    - GetTDependentProperty (from ICapeThermoCoumpounds interface)
    - GetPDependentProperty (from ICapeThermoCoumpounds interface)
    - CalcSinglePhaseScalarProperty (from ICapeThermoPropertyRoutine interface: scalar version)
    - CalcSinglePhaseVectorProperty (from ICapeThermoPropertyRoutine interface: vector version)
    - CalcTwoPhaseScalarProperty (from ICapeThermoPropertyRoutine interface: scalar version)
    - CalcTwoPhaseVectorProperty (from ICapeThermoPropertyRoutine interface: vector version)
    
(b) The functions starting with the underscores can be used for calculations (they use and return float values):
    
    - _GetCompoundConstant
    - _GetTDependentProperty
    - _GetPDependentProperty
    - _CalcSinglePhaseScalarProperty
    - _CalcSinglePhaseVectorProperty
    - _CalcTwoPhaseScalarProperty
    - _CalcTwoPhaseVectorProperty

The daeThermoPackage auxiliary class offers functions to calculate specified properties, for instance:
    
- Transport properties:
      
  - cp, kappa, mu, Dab (heat capacity, thermal conductivity, dynamic viscosity, diffusion coefficient)
    
- Thermodynamic properties:
      
  - rho
  - h, s, G, H, I (enthalpy, entropy, gibbs/helmholtz/internal energy)
  - h_E, s_E, G_E, H_E, I_E, V_E (excess enthalpy, entropy, gibbs/helmholtz/internal energy, volume)
  - f and phi (fugacity and coefficient of fugacity)
  - a and gamma (activity and the coefficient of activity)
  - z (compressibility factor)
  - K, surfaceTension (ratio of fugacity coefficients and the surface tension)

Nota bene:
  Some of the above functions return scalars while the others return arrays of values.
  Check the thermo_packages.py file for details.

All functions return properties in the SI units (as specified in the CapeOpen 1.1 standard).

Known issues:
    
- Many properties from the CapeOpen standard are not supported by all thermo packages.
- CalcEquilibrium from the ICapeThermoEquilibriumRoutine is not supported.
- CoolProp does not provide transport models for many compounds.
- The function calls are NOT thread safe.
- The code generation will NOT work for models using the thermo packages.
- Some CapeOpen thermo packags refuse to return properties for mass basis (i.e. density).

In this tutorial, we use a very simple model: a quantity of liquid (water + ethanol mixture) 
is heated using the constant input power. The model uses a thermo package to calculate the commonly
used transport properties such as specific heat capacity, thermal conductivity, dynamic viscosity
and binary diffusion coefficients. First, the low-level functions are tested for CapeOpen and 
CoolProp packages in the test_single_phase, test_two_phase, test_coolprop_single_phase functions. 
The results depend on the options selected in the CapeOpen package (equation of state, etc.).
Then, the model that uses a thermo package is simulated.

The plot of the specific heat capacity as a function of temperature:
    
.. image:: _static/tutorial19-results.png
   :width: 500px
   
Nota bene:
  There is a difference between results in Windows and other platforms since 
  the CapeOpen thermo packages are available only in Windows.
]]></Description>
  <Domains/>
  <Parameters>
    <Object ID="40101512" Class="daeParameter" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[m]]></Name>
      <Description><![CDATA[Mass of water]]></Description>
      <Units>
        <kg>1</kg>
      </Units>
      <DomainRefs/>
    </Object>
  </Parameters>
  <Variables>
    <Object ID="39978976" Class="daeVariable" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[c_p]]></Name>
      <Description><![CDATA[Specific heat capacity of the liquid]]></Description>
      <VariableType>specific_heat_capacity_t</VariableType>
      <DomainRefs/>
    </Object>
    <Object ID="39979584" Class="daeVariable" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[k]]></Name>
      <Description><![CDATA[Thermal conductivity of the liquid]]></Description>
      <VariableType>thermal_conductivity_t</VariableType>
      <DomainRefs/>
    </Object>
    <Object ID="40246304" Class="daeVariable" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[mu]]></Name>
      <Description><![CDATA[Viscosity of the liquid]]></Description>
      <VariableType>dynamic_viscosity_t</VariableType>
      <DomainRefs/>
    </Object>
    <Object ID="40246912" Class="daeVariable" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[Q_in]]></Name>
      <Description><![CDATA[Power of the heater]]></Description>
      <VariableType>power_t</VariableType>
      <DomainRefs/>
    </Object>
    <Object ID="40247520" Class="daeVariable" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[T]]></Name>
      <Description><![CDATA[Temperature of the liquid]]></Description>
      <VariableType>temperature_t</VariableType>
      <DomainRefs/>
    </Object>
  </Variables>
  <Ports/>
  <EventPorts/>
  <Equations>
    <Object ID="40247976" Class="daeEquation" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[C_p]]></Name>
      <Description><![CDATA[Specific heat capacity as a function of the temperature.]]></Description>
      <EquationType>eAlgebraic</EquationType>
      <Residual>$${ { c_p }  - \left( { \left(  { tpp.heatCapacityCp \left( {100000 {{Pa}}}, { T } , { \left[{0.6 {}}, {0.4 {}} \right] } , Liquid, mole \right)} \right)  \over \left( { \left(  { tpp.molecularWeight \left( {100000 {{Pa}}}, { T } , { \left[{0.6 {}}, {0.4 {}} \right] } , Liquid, undefined \right)} \right)  \cdot {0.001 {{kg}{mol ^ {-1}}}}}  \right) }  \right) }  = 0$$</Residual>
      <DistributedDomainInfos/>
    </Object>
    <Object ID="40114648" Class="daeEquation" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[kappa]]></Name>
      <Description><![CDATA[Thermal conductivity as a function of the temperature.]]></Description>
      <EquationType>eAlgebraic</EquationType>
      <Residual>$${ { k }  - \left(  { tpp.thermalConductivity \left( {100000 {{Pa}}}, { T } , { \left[{0.6 {}}, {0.4 {}} \right] } , Liquid, undefined \right)} \right) }  = 0$$</Residual>
      <DistributedDomainInfos/>
    </Object>
    <Object ID="40116968" Class="daeEquation" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[mu]]></Name>
      <Description><![CDATA[Viscosity as a function of the temperature.]]></Description>
      <EquationType>eAlgebraic</EquationType>
      <Residual>$${ { mu }  - \left(  { tpp.viscosity \left( {100000 {{Pa}}}, { T } , { \left[{0.6 {}}, {0.4 {}} \right] } , Liquid, undefined \right)} \right) }  = 0$$</Residual>
      <DistributedDomainInfos/>
    </Object>
    <Object ID="40238136" Class="daeEquation" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[HeatBalance]]></Name>
      <Description><![CDATA[Integral heat balance equation]]></Description>
      <EquationType>eImplicitODE</EquationType>
      <Residual>$${ \left( { \left( { { m }  \cdot { c_p } }  \right)  \cdot \left( { { \partial { { \left( { T }  \right) }  } } \over { \partial { t  } } }  \right) }  \right)  - { Q_in } }  = 0$$</Residual>
      <DistributedDomainInfos/>
    </Object>
  </Equations>
  <OnEventActions/>
  <OnConditionActions/>
  <STNs/>
  <PortConnections/>
  <EventPortConnections/>
  <Components/>
  <ComponentsArrays/>
  <PortArrays/>
</Model>
