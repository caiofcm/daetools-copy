<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="dae-tools-rt.xsl"?>
<Model ID="37534624" Class="daeModel" Library="DAE.Core" Version="1.7.3">
  <Name><![CDATA[tutorial7]]></Name>
  <Description><![CDATA[
This tutorial introduces the following concepts:

- Quasi steady state initial condition mode (eQuasiSteadyState flag)
- User-defined schedules (operating procedures)
- Resetting of degrees of freedom
- Resetting of initial conditions

In this example we use the same heat transfer problem as in the tutorial 4.
The input power of the heater is defined as a variable. Since there is
no equation defined to calculate the value of the input power, the system
contains N variables but only N-1 equations. To create a well-posed DAE system
one of the variable needs to be "fixed". However the choice of variables is not
arbitrary and in this example the only variable that can be fixed is Qin. Thus,
the Qin variable represents a degree of freedom (DOF). Its value will be fixed
at the beginning of the simulation and later manipulated in the user-defined
schedule in the overloaded function daeSimulation.Run().

The default daeSimulation.Run() function (re-implemented in Python) is:
    
.. code-block:: python

    def Run(self):
        # Python implementation of daeSimulation::Run() C++ function.
        
        import math
        while self.CurrentTime < self.TimeHorizon:
            # Get the time step (based on the TimeHorizon and the ReportingInterval).
            # Do not allow to get past the TimeHorizon.
            t = self.NextReportingTime
            if t > self.TimeHorizon:
                t = self.TimeHorizon

            # If the flag is set - a user tries to pause the simulation, therefore return.
            if self.ActivityAction == ePauseActivity:
                self.Log.Message("Activity paused by the user", 0)
                return

            # If a discontinuity is found, loop until the end of the integration period.
            # The data will be reported around discontinuities!
            while t > self.CurrentTime:
                self.Log.Message("Integrating from [%f] to [%f] ..." % (self.CurrentTime, t), 0)
                self.IntegrateUntilTime(t, eStopAtModelDiscontinuity, True)
            
            # After the integration period, report the data. 
            self.ReportData(self.CurrentTime)
            
            # Set the simulation progress.
            newProgress = math.ceil(100.0 * self.CurrentTime / self.TimeHorizon)
            if newProgress > self.Log.Progress:
                self.Log.Progress = newProgress
                
In this example the following schedule is specified:

1. Run the simulation for 100s using the daeSimulation.IntegrateForTimeInterval() function
   and report the data using the daeSimulation.ReportData() function.

2. Re-assign the value of Qin to 2000W. After re-assigning DOFs or re-setting initial conditions
   the function daeSimulation.Reinitialize() has to be called to reinitialise the DAE system.
   Use the function daeSimulation.IntegrateUntilTime() to run until the time reaches 200s
   and report the data.

3. Re-assign the variable Qin to a new value 1500W, re-initialise the temperature again to 300K
   re-initialise the system, run the simulation until the TimeHorizon is reached using the function
   daeSimulation.Integrate() and report the data.

The plot of the inlet power:

.. image:: _static/tutorial7-results.png
   :width: 500px

The temperature plot:

.. image:: _static/tutorial7-results2.png
   :width: 500px
]]></Description>
  <Domains/>
  <Parameters>
    <Object ID="37534920" Class="daeParameter" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[m]]></Name>
      <Description><![CDATA[Mass of the copper plate]]></Description>
      <Units>
        <kg>1</kg>
      </Units>
      <DomainRefs/>
      <Values>
        <Item>1</Item>
      </Values>
    </Object>
    <Object ID="37535384" Class="daeParameter" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[c_p]]></Name>
      <Description><![CDATA[Specific heat capacity of the plate]]></Description>
      <Units>
        <J>1</J>
        <K>-1</K>
        <kg>-1</kg>
      </Units>
      <DomainRefs/>
      <Values>
        <Item>385</Item>
      </Values>
    </Object>
    <Object ID="37535960" Class="daeParameter" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[&alpha;]]></Name>
      <Description><![CDATA[Heat transfer coefficient]]></Description>
      <Units>
        <K>-1</K>
        <W>1</W>
        <m>-2</m>
      </Units>
      <DomainRefs/>
      <Values>
        <Item>200</Item>
      </Values>
    </Object>
    <Object ID="37536296" Class="daeParameter" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[A]]></Name>
      <Description><![CDATA[Area of the plate]]></Description>
      <Units>
        <m>2</m>
      </Units>
      <DomainRefs/>
      <Values>
        <Item>0.100000000000000</Item>
      </Values>
    </Object>
    <Object ID="37536632" Class="daeParameter" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[T_surr]]></Name>
      <Description><![CDATA[Temperature of the surroundings]]></Description>
      <Units>
        <K>1</K>
      </Units>
      <DomainRefs/>
      <Values>
        <Item>283</Item>
      </Values>
    </Object>
  </Parameters>
  <Variables>
    <Object ID="37537376" Class="daeVariable" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[Q_in]]></Name>
      <Description><![CDATA[Power of the heater]]></Description>
      <VariableType>power_t</VariableType>
      <DomainRefs/>
      <OverallIndex>0</OverallIndex>
    </Object>
    <Object ID="37537984" Class="daeVariable" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[T]]></Name>
      <Description><![CDATA[Temperature of the plate]]></Description>
      <VariableType>temperature_t</VariableType>
      <DomainRefs/>
      <OverallIndex>1</OverallIndex>
    </Object>
  </Variables>
  <Ports/>
  <EventPorts/>
  <Equations>
    <Object ID="37547272" Class="daeEquation" Library="DAE.Core" Version="1.7.3">
      <Name><![CDATA[HeatBalance]]></Name>
      <Description><![CDATA[Integral heat balance equation]]></Description>
      <Residual>$${ \left( { \left( { \left( { { m }  \cdot { c_p } }  \right)  \cdot \left( { { \partial { { \left( { T }  \right) }  } } \over { \partial { t  } } }  \right) }  \right)  - { Q_in } }  \right)  + \left( { \left( { { \alpha }  \cdot { A } }  \right)  \cdot \left( { { T }  - { T_surr } }  \right) }  \right) }  = 0$$</Residual>
      <EquationExecutionInfos>
        <Object ID="37549280" Class="daeEquationExecutionInfo" Library="" Version="1.7.3">
          <EquationEvaluationNode>$${ \left( { \left( { \left( { { m }  \cdot { c_p } }  \right)  \cdot { { \partial { { T }  } } \over { \partial { t  } } } }  \right)  - { Q_in } }  \right)  + \left( { \left( { { \alpha }  \cdot { A } }  \right)  \cdot \left( { { T }  - { T_surr } }  \right) }  \right) }  = 0$$</EquationEvaluationNode>
          <IsLinear>False</IsLinear>
        </Object>
      </EquationExecutionInfos>
    </Object>
  </Equations>
  <OnEventActions/>
  <OnConditionActions/>
  <STNs/>
  <PortConnections/>
  <EventPortConnections/>
  <Components/>
  <ComponentArrays/>
  <PortArrays/>
</Model>
